buildscript {

    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }

    apply plugin: 'jacoco'
    apply plugin: 'java'

    jacoco {
        toolVersion = '0.8.0'
    }

}
plugins {
    id "com.github.kt3k.coveralls" version "2.8.1"
}

repositories {
    mavenCentral()
}

configure(allprojects) { project ->
    buildscript {

        version = VERSION_NAME
        group = GROUP

        repositories {
            jcenter()
            mavenCentral()
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
            mavenLocal()
            google()
        }
    }
}

/**
 *  List of modules that don't require Jacoco
 */
def ignoredByJacoco = [
        'sample'
]

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects { prj ->

    group = 'org.smartregister'

    ext.androidToolsBuildGradle = '21.1.2'
    ext.androidBuildToolsVersion = '27.0.3'
    ext.androidMinSdkVersion = 16
    ext.androidCompileSdkVersion = 27
    ext.androidTargetSdkVersion = 27

    ext.androidAnnotationsVersion = '3.0.1';
    ext.androidAnnotationsAPIVersion = '3.0.1';

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "http://nexus.motechproject.org/content/repositories/drishti" }
        maven { url "http://nexus.motechproject.org/content/repositories/snapshots" }
        maven { url "http://acra.googlecode.com/svn/repository/releases" }
        maven { url "http://repo.maven.apache.org/maven2" }
        mavenLocal()
        google()
    }

    // Improve build server performance by allowing disabling of pre-dexing
    // (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    // Apply Jacoco only if the project is not in the ignore list
    if (!ignoredByJacoco.contains(prj.name)) {

        task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

            reports {
                xml.enabled = true
                html.enabled = true
            }

            getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
            getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
            def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
            def mainSrc = "$project.projectDir/src/main/java"

            sourceDirectories = files([mainSrc])
            classDirectories = files([debugTree])
            executionData = fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
            ])
        }

    }


}

def publishedProjects

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    publishedProjects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            publishedProjects.add(prj)
        }
    }

    dependsOn(publishedProjects.jacocoTestReport)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "**/reports/jacoco/jacocoRootReport/merged.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData = files(subproject.jacocoTestReport.executionData)
    }
}


apply plugin: 'build-dashboard'
apply plugin: 'io.codearte.nexus-staging'

buildDashboard {
    reports.html.setDestination(file("build/"))
}

test.reports.html.enabled = false
test.reports.junitXml.enabled = false

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

